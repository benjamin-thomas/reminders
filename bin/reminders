#!/usr/bin/env ruby

# Std library
require 'optparse'
require 'logger'
require 'csv'
require 'fileutils'
require 'time' # Time.parse
require 'readline'

# External
begin
  require 'dotenv'
  require 'dbus'
  require 'awesome_print'
  # https://ruby-doc.org/stdlib-2.5.1/libdoc/readline/rdoc/Readline.html
  require 'sequel'
  require 'terminal-table'
  require 'chronic'
  require 'colored'
rescue LoadError
  abort("
    # Note: ruby-pg is buggy/unusable in Ubuntu 18.04
    apt remove ruby-pg
    apt-get install ruby-dev libpq-dev
    gem install --user pg

    apt-get install ruby-dotenv ruby-dbus ruby-awesome-print ruby-sequel ruby-pg ruby-terminal-table ruby-chronic ruby-colored
        ")
end

Dotenv.load('~/.env/reminders')
load File.expand_path(File.join(__dir__, '../config/database.rb'))
require_relative '../models/reminder'

# For awesome_print/console output
class Time
  def inspect
    strftime("%a %d %b %Y, %H:%M [%V]")
  end
end

$track_longuest = false

=begin
Priorities improvements:

Notify phone every:

prio=2400
  24 / (2400 / 100) = 1 hour
  24 / ((2400 / 100) / 60) = 60 minutes

prio=1200
  24 / (1200 / 100) = 2 hours
  24 / ((1200 / 100) / 60) = 120 minutes

prio=600
  24 / (600 / 100) = 4 hours
  24 / ((600 / 100) / 60) = 240 minutes

prio=300
  24 / (300 / 100) = 8 hours

prio=200
  24 / (200 / 100) = 12 hours
  24 / ((200 / 100) / 60) = 720 minutes

prio=100
  24 / (100 / 100) = 24 hours
  24 / ((100 / 100) / 60) = 1440 minutes

prio=4800
  24 / (4800 / 100) = 0.5 hours
  24 / ((4800 / 100) / 60) = 30 minutes

prio=72000
  2400 * 30 = 30 times in an hour, so every 2 minutes
  24 / ((72000 / 100) / 60) = 2 minutes

prio=144000
  2400 * 60 = 144000 = 60 times in an hour, so every minute
  24 / ((144000 / 100) / 60) = 1 minute
=end

=begin
To read:

- https://dbus.freedesktop.org/doc/dbus-tutorial.html
- http://www.linuxembedded.fr/2015/07/comprendre-dbus/
- https://yoannsculo.developpez.com/tutoriels/linux/introduction-dbus/
- http://www.kaizou.org/2014/06/dbus-command-line/
=end


SESSION_BUS = DBus.session_bus
NOTIFICATION_SERVICE   = SESSION_BUS["org.freedesktop.Notifications"]
NOTIFICATION_OBJECT    = NOTIFICATION_SERVICE["/org/freedesktop/Notifications"]
NOTIFICATION_INTERFACE = NOTIFICATION_OBJECT["org.freedesktop.Notifications"]

# Look for section "Basic types": https://dbus.freedesktop.org/doc/dbus-specification.html
DBUS_ASCII_TYPE_CODE = {
  byte: 'y',
}

# https://developer.gnome.org/notification-spec/
NOTIFY_URGENCY = {
       low: 0,
    normal: 1,
  critical: 2,
}
NOTIFY_TIMEOUT = {
  default: -1,
    never:  0,
}

ONE_MINUTE = MINUTES = 60
ONE_HOUR   = HOURS   = 60*MINUTES
ONE_DAY    = DAYS    = 24*HOURS
ONE_WEEK   = WEEKS   = 7*DAYS


# Readline setup START
COMMANDS = [
  'ls',
  'due',
  'today',
  'search ',
  'searchd ',
  'next ',
  'upto ',
  'track_longuest',
  'export',
  'import',
  'testdate',
  'push_back',
  'bday[NAME, BDATE]', # special tag
]
COMMANDS_COMP = proc { |s| COMMANDS.grep(/^#{Regexp.escape(s)}/) }

Readline.completion_proc = COMMANDS_COMP
Readline.completion_append_character = ''
# Readline setup END

def human_sec(sec)
  fmt = if sec < 3600
          '%M:%S'
        else
          '%H:%M:%S'
        end

  Time.at(sec).utc.strftime(fmt) # utc is important!
end

def parse_date_str(datestr)
  return if datestr.nil?

  res = IO.popen(['date', '-R', '-d', datestr]) { |f| f.gets&.chomp }
  res && Time.parse(res)
end

Options = Struct.new(:create_db, :destroy_db, :notify)
args = Options.new

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options]"

  opts.on('--create-db', 'Create database') do
    args.create_db = true
  end

  opts.on('--destroy-db', 'Destroy database (use after export, then destroy, then create, then import)') do
    args.destroy_db = true
  end

  opts.on('--notify', 'Warn every minute about overdue reminders with notify-send') do
    args.notify = true
  end
end.parse!

ap(args)

def create_db!
  DB.execute('
  CREATE TABLE reminders (
      id SERIAL PRIMARY KEY
    , priority INTEGER NOT NULL DEFAULT 0
    , trigger_on TIMESTAMP NULL
    , notification_id INTEGER NULL
    , phone_notified_on TIMESTAMP NULL
    , descr TEXT NOT NULL
    , created_on TIMESTAMP NOT NULL
  );
             ')
  p(:CREATE_DB_OK)
end

def destroy_db!
  DB.execute('
  DROP TABLE reminders;
             ')
  p(:DESTROY_DB_OK)
end

if args.create_db
  create_db!
  exit
end

if args.destroy_db
  destroy_db!
  exit
end

def table(reminders, show_ids: false)
  headings = [:id, :priority, :trigger_on, :descr]
  longuest = {
    id: nil,
    size: 0,
  }
  rs = reminders.map do |r|
    #r.values.values_at(*headings)
    descr = if r.descr.include?(';')
              r.descr.split(';').first + '[MORE]'
            else
              r.descr
            end

    if descr.size > longuest.fetch(:size)
      longuest[:id] = r.id
      longuest[:size] = descr.size
    end

    [
      r.id,
      r.priority,
      r.trigger_on&.strftime("%Y-%m-%d %H:%M (%a) [%V]"),
      descr,
    ]
  end

  rs2 = []
  rs.each_with_index do |r, i|
    rs2 << r
    if i % 4 == 3 # split every 4 rows, makes targetting IDs visually easier
      rs2 << :separator
    end
  end

  rs2.pop if rs2[-1] == :separator

  table = Terminal::Table.new(
    headings: headings,
    rows: rs2,
  )

  cnt = rs.count
  case cnt
  when 0
    puts "No records found"
  when 1
    puts(table)
    puts "1 record found"
  else
    puts(table)
    if show_ids
      puts "#{cnt} records found: #{reminders.select_map(:id).join(' ')}"
    else
      puts "#{cnt} records found"
    end
  end

  if $track_longuest
    puts("longuest=#{longuest}")
  end
end

def by_priority
  [Sequel.desc(:priority), Sequel.asc(:trigger_on)]
end

def by_trigger_on
  # [:trigger_on, Sequel.desc(:priority)]
  [Sequel.lit('CASE WHEN trigger_on IS NULL THEN 1 ELSE 0 END, trigger_on ASC'), Sequel.desc(:priority)]
end

def all_by_priority
  Reminder.order(*by_priority)
end

def all_by_trigger_on
  Reminder.order(*by_trigger_on)
end

OVERDUE_COND = proc do
  (priority >=0) & (trigger_on <= Time.now)
end

def overdues_by_priority
  all_by_priority.where(&OVERDUE_COND)
end

def overdues_by_trigger_on
  all_by_trigger_on.where(&OVERDUE_COND)
end

TODAY_COND = proc do
  (priority >=0) & (trigger_on < Date.today+1)
end

# TODO: use Reminder.prioritized and move into model
def scheduled_today_by_priority
  all_by_priority.where(&TODAY_COND)
end

# TODO: use Reminder.prioritized and move into model
def scheduled_today_by_trigger_on
  all_by_trigger_on.where(&TODAY_COND)
end

def ask(attribute, prefill = nil)
  if prefill
    Readline.pre_input_hook = -> {
      Readline.insert_text(prefill.to_s)
      Readline.redisplay
    }
  end

  line = Readline.readline("#{attribute}: ")

  Readline.pre_input_hook = nil
  res = line.rstrip
  return nil if res.empty?

  res
end

def build_reminder(descr:, trigger_on:, priority:)
  {
    descr: ask('descr', descr),
    trigger_on: parse_date_str(ask('trigger_on', trigger_on)),
    priority: ask('priority', priority),
  }
end

def edit_reminder(id)
  r = Reminder.first!(id: id)
  [r, build_reminder(descr: r.descr, trigger_on: r.trigger_on, priority: r.priority)]
end

def testdate
  Readline.completion_proc = proc{}
  puts "[INFO] type `exit` to exit loop"
  puts "[INFO] see `help` for valid date strings"
  loop do
    while (line = Readline.readline('testdate> ', true))
      datestr = line.rstrip
      return if datestr == 'exit'

      ts = Chronic.parse(datestr)
      ts2 = parse_date_str(datestr)
      ap(
        chronic: ts,
        sys: ts2,
      )
    end
  end
ensure
  Readline.completion_proc = COMMANDS_COMP
end

def run_cli
  puts "[INFO] type `help` to display usage summary"
  add_hist = false
  while (line = Readline.readline('> ', add_hist))
    next if line.nil? || line.empty? # Ignore empty returns
    exit if line == '!!!'

    split_char = if line.include?(';')
                   ';'
                 else
                   ' '
                 end
    cmd_header_keep_whole_history = [
      'next',
      'next2',
      'search',
      'search2',
      'upto',
      'upto2',
    ]
    to_push = if line.start_with?(*cmd_header_keep_whole_history)
                line
              else
                line.split(split_char).first
              end
    if to_push != line
      to_push += split_char
    end
    to_push += ' ' if to_push.end_with?(';')

    last_history_item = Readline::HISTORY[-1] rescue nil
    if to_push != last_history_item && to_push != '!'
      Readline::HISTORY.push(to_push)
    end

    cmd = line.rstrip
    case cmd
    when 'help'
      puts <<~EOS

      - !!!                  : exit main mode, or push_back mode (or use <C-D> in main mode)
      - 123<ENTER>           : edit reminder with ID=123
      - ! 123<ENTER>         : delete reminder ID=123
      - >CODE 123<ENTER>     : reschedule reminder ID=123
      - >CODE 123 456<ENTER> : reschedule reminders with ID=123, ID=456
          CODE can be as follows:
            - 10m  : trigger in 10 minutes
            -  3h  : trigger in 3 hours
            -  3h~ : trigger in 3 hours, and add random minutes
            -  5d  : trigger in 5 days
            -  2w  : trigger in 2 weeks
            -  3M  : trigger in 3 months
      - +CODE 123<ENTER>     : reschedule reminder ID=123, but use last trigger timestamp as reference
      - +CODE 123 456<ENTER> : reschedule reminders with ID=123, ID=456
            - 24h : retrigger at same HH:MM, on the next day
      - @TIME_CODE ; 123<ENTER>     : reschedule reminders ID=123 at TIME_CODE today (space around `;` is optional)
      - @TIME_CODE ; 123 456<ENTER> : reschedule reminders with ID=123, ID=456 at TIME_CODE
          HOUR can be as follows (use `testdate` below):
            - 8pm        : trigger at 8pm
            - 1800       : trigger at 6pm
            - 18         : trigger at 6pm
            - sat 4pm    : trigger saturday at 4pm
            - sat 1600   : trigger saturday at 4pm
            - sat 16     : trigger saturday at 4pm
            - sat 0500   : trigger saturday at 5am
            - sat 05     : trigger saturday at 5am
            - sat 5      : trigger saturday at 5am
            - 2000 1 dec : trigger at 8pm on december 1st
            - 1 week [hence]
            - 1 month [hence]
            - 3 days [hence]
            - 1 week + 3 days
            - 6pm + 10 days
            - 1800 + 10 days
            - sat 4pm + 1 week

      Commands below are mostly available via tab completion

      - ls               : list prioritized (triggering) reminders by trigger timestamp first
      - ls2              : list all reminders by priority first
      - due              : list overdue reminders by priority first
      - due2             : list overdue reminders by trigger timestamp first
      - today            : list reminders scheduled for today by timestamp first
      - today2           : list reminders scheduled for today by priority first
      - search DESCR     : list reminders based on descr
      - searchd DESCR    : list due reminders based on descr
      - next CODE        : list reminders that will trigger in CODE (see above), by trigger_on
      - next2 CODE       : list reminders that will trigger in CODE (see above), by priority
      - upto TIME_CODE   : list reminders that will trigger upto TIME_CODE (see above), by trigger_on
      - upto2 TIME_CODE  : list reminders that will trigger upto TIME_CODE (see above), by priority
      - track_longuest   : track_longuest string (fix unreadable output)

      - export           : export data to '#{DB_EXPORT_PATH}'
      - import           : restore data from '#{DB_EXPORT_PATH}'
      - testdate         : datestrings REPL
      - push_back        : enter pushback mode (handle multiple overdues, exit with !!!)
      - bday[NAME, BDATE]: special tag, will compute and add trailing data
      EOS
    when 'push_back'
      Readline::HISTORY.clear
      cnt = overdues_by_priority.count
      overdues_by_priority.each do |r|
        ap(r)
        add_hist = false
        push_back_code = Readline.readline("PUSH_BACK[#{cnt}]> ", add_hist)
        cnt -= 1
        last_history_item = Readline::HISTORY[-1] rescue nil
        if push_back_code != last_history_item
          Readline::HISTORY.push(push_back_code)
        end
        break if push_back_code == '!!!'
        case push_back_code[0]
        when '!'
          r.delete
          r.remove_notification!(delete: true)
          next
        when '+'
          r.reschedule(from: r.trigger_on, code: push_back_code[1..-1])
        when '>'
          r.reschedule(from: Time.now, code: push_back_code[1..-1])
        when '@'
          r.reschedule2(time_code: push_back_code[1..-1])
        else
          r.reschedule2(time_code: push_back_code)
        end
        ap(r.trigger_on)
        r.remove_notification!
        if r.trigger_on < Time.now
          3.times do
            warn('STOP PUSHING BACK IN THE PAST!'.red.bold)
          end
        elsif r.trigger_on < Time.now + 60*30
          3.times do
            warn('PUSHED BACK LESS THAN 1 HOUR, DID YOU MEAN IT?'.yellow.bold)
          end
        end
      end
    when 'ls'
      table(all_by_trigger_on)
    when 'ls2'
      table(all_by_priority)
    when 'due'
      table(overdues_by_priority)
    when 'due2'
      table(overdues_by_trigger_on)
    when 'today'
      table(scheduled_today_by_trigger_on)
    when 'today2'
      table(scheduled_today_by_priority)
    when 'testdate'
      testdate
    when 'track_longuest'
      $track_longuest = !$track_longuest
      puts($track_longuest ? 'ON' : 'OFF')
      next
    when 'export'
      if File.exist?(DB_EXPORT_PATH)
        bak_path = "#{DB_EXPORT_PATH}.bak.#{Time.now.to_i}"
        FileUtils::Verbose::mv(DB_EXPORT_PATH, bak_path)
      end
      CSV.open(DB_EXPORT_PATH, 'wb') do |csv|
        csv << ['priority', 'trigger_on', 'descr', 'created_on']
        Reminder.order(:created_on).all do |r|
          csv << [r.priority, r.trigger_on, r.descr, r.created_on]
        end
      end
      p(:OK)
      puts "Inspect with:"
      # pip install tabview
      puts "tabview #{DB_EXPORT_PATH}"
      # apt install csvtool
      puts "csvtool readable #{DB_EXPORT_PATH}"
    when 'import'
      DB.transaction do # I was getting double entries + reimport is *much* quicker
        CSV.foreach(DB_EXPORT_PATH, headers: true) do |row|
          Reminder.insert(
            descr: row.fetch('descr'),
            trigger_on: row.fetch('trigger_on'),
            priority: row.fetch('priority'),
            created_on: row['created_on'],
          )
        end
      end
    else
      if (m = /^! (?<id>\d+)/.match(cmd)) # delete
        r = Reminder.first!(id: m[:id])
        r.delete
        r.remove_notification!(delete: true)
        ap(r)
        p(:DELETE_OK)
        table(overdues_by_priority)


        next
      elsif (m = /^>(?<code>\d+[mhdwM]~?)\s(?<ids>(\d+\s?)+)/.match(cmd)) # reschedule from now
        m[:ids].split.each do |id|
          r = Reminder.first!(id: id)
          r.reschedule(from: Time.now, code: m[:code])
          r.remove_notification!
          ap(r)
        end

        table(overdues_by_priority)
        next
      elsif (m = /^\+(?<code>\d+[mhdwM]~?)\s(?<ids>(\d+\s?)+)/.match(cmd)) # reschedule from last trigger timestamp
        m[:ids].split.each do |id|
          r = Reminder.first!(id: id)
          r.reschedule(from: r.trigger_on, code: m[:code])
          r.remove_notification!
          ap(r)
        end

        table(overdues_by_priority)
        next
      elsif (m = /@(?<time_code>.+)\s?;\s?(?<ids>(\d+\s?)+)/.match(cmd)) # reschedule with TIME_CODE
        m[:ids].split.each do |id|
          r = Reminder.first!(id: id)
          r.reschedule2(time_code: m[:time_code])
          r.remove_notification!
          ap(r)
        end

        table(overdues_by_priority)
        next
      elsif (m = /next (?<code>\d+[mhdwM])/.match(cmd)) # next
        table(
          Reminder.next(m[:code]).order(*Reminder::BY_TRIGGER_ON_FIRST)
        )
        next
      elsif (m = /next2 (?<code>\d+[mhdwM])/.match(cmd)) # next2
        table(
          Reminder.next(m[:code]).order(*Reminder::BY_PRIORITY_FIRST)
        )
        next
      elsif (m = /upto (?<time_code>.+)/.match(cmd)) # upto
        table(
          Reminder.upto(m[:time_code]).order(*Reminder::BY_TRIGGER_ON_FIRST)
        )
        next
      elsif (m = /upto2 (?<time_code>.+)/.match(cmd)) # upto2
        table(
          Reminder.upto(m[:time_code]).order(*Reminder::BY_PRIORITY_FIRST)
        )
        next
      elsif (m = /^(?<id>\d+)\z/.match(cmd)) # edit
        loop do
          r, h = edit_reminder(m[:id])
          r.descr = h.fetch(:descr)
          r.trigger_on = h.fetch(:trigger_on)
          r.priority =  h.fetch(:priority)
          if r.valid?
            r.autofill!
            r.save
            r.remove_notification!
            ap(r)
            break
          end
          ap(r.errors)
        end
        table(overdues_by_priority)

        next
      elsif (m = /^search (?<string>.+\Z)/.match(cmd)) # search
        table(
          Reminder
            .where(Sequel.ilike(:descr, "%" + m[:string] + "%"))
            .order(*Reminder::BY_PRIORITY_FIRST),
          show_ids: true
        )
        next
      elsif (m = /^searchd (?<string>.+\Z)/.match(cmd)) # search due
        rems = overdues_by_priority
          .where(Sequel.ilike(:descr, "%" + m[:string] + "%"))
        table(
          rems,
          show_ids: true
        )
        next
      end

      # create
      loop do
        br = build_reminder(descr: cmd, trigger_on: Time.now + ONE_HOUR, priority: 0)
        r = Reminder.new(
          descr: br.fetch(:descr),
          trigger_on: br.fetch(:trigger_on),
          priority: br.fetch(:priority),
          created_on: Time.now,
        )
        if r.valid?
          r.autofill!
          r.save
          ap(r)
          break
        else
          p(r.errors)
        end
      end
      p(:CREATE_OK)
    end
  end
end

def run_notifier!
  Reminder.dataset.update(notification_id: nil) # start with fresh ids in case of notification restart
  loop do
    overdues = overdues_by_priority
    overdues.each do |o|
      o.notify!
      if o.notify_phone_required?
        system('push_to_phone', o.notify_msg[0,140]) # TODO: handle max 140 in push_to_phone later
        o.update(phone_notified_on: Time.now)
      end
    end
    sleep(ONE_MINUTE*5)
  end
rescue => e
  # Connection lost, or else
  DB_LOGGER.warn("Rescuing from error : #{e}")
  DB_LOGGER.warn("Will retry in 1m.")
  sleep(60)
  retry
end

if args.notify
  run_notifier!
  fail 'Impossible'
end

run_cli
